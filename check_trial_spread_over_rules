clear all
par = [301 304 306 309 310 312 313 316 318 319 320 322 323 324 326 328 330 331 333 334 336 340 341 342 401 406 407 410 411 412 413 414 416 418 420 422 423 424 425 426 427 428 429 430 431 432 433 434];
num_trials = [8 30 39 36 38 12 16 27 29 19 38 8 36 16 21 13 36 28 13 21 16 35 32 22 45 21 30 38 34 45 38 41 32 40 40 40 39 39 11 43 39 36 41 36 24 38 42 42];

for m = 1:length(par);
    if par(m) < 400;
        cd(strcat('F:/Experiment_3/design_2_base/testing/old/',num2str(par(m))));
    else
        cd(strcat('F:/Experiment_3/design_2_base/testing/young/',num2str(par(m))));
    end
    clear results
    results = importdata('RT_RESULTS.txt');
    try 
        results(find(results(:,1) < 9),:) = [];
    catch
        results = results.data;
        results(find(results(:,1) < 9),:) = [];
    end

    clear trials
    % find the experimental trials
    trials.experimental = results(find(results(:,8) == 1),:);

    % now split into the 4 different rule options
    trials.exp.one = trials.experimental(find(trials.experimental(:,3) == 1),:);
    trials.exp.two = trials.experimental(find(trials.experimental(:,3) == 2),:);
    trials.exp.three = trials.experimental(find(trials.experimental(:,3) == 3),:);
    trials.exp.four = trials.experimental(find(trials.experimental(:,3) == 4),:);

    % create the alternative trial types removing trials where n - 1 is error
    trials.exp.one(:,17) = 0;
    trials.exp.two(:,17) = 0;
    trials.exp.three(:,17) = 0;
    trials.exp.four(:,17) = 0;
    % CUE 1
    % Check the first trial
    if trials.exp.one(1,5) == 2
        trials.exp.one_22 = trials.exp.one(1,:);
        trials.exp.one_22(1,17) = 1
    end
    % run through and check the rest
    for n = 2:length(trials.exp.one(:,1));
        if trials.exp.one(n,5) == 2 & trials.exp.one(n-1,5) == 1;
            try
                trials.exp.one_12(length(trials.exp.one_12(:,1)) + 1,:) = trials.exp.one(n,:);
            catch
                trials.exp.one_12(1,:) = trials.exp.one(n,:);
            end
        elseif trials.exp.one(n,5) == 2;
            try
                trials.exp.one_22(length(trials.exp.one_22(:,1)) + 1,:) = trials.exp.one(n,:);
                trials.exp.one_22(length(trials.exp.one_22(:,1)),17) = length(trials.exp.one_22(:,1))
            catch
                trials.exp.one_22(1,:) = trials.exp.one(n,:);
                trials.exp.one_22(1,17) = 1
            end
        end
    end
    % 
    % CUE 2
    % Check the first trial
    if trials.exp.two(1,5) == 2
        trials.exp.two_22 = trials.exp.two(1,:);
        trials.exp.two_22(1,17) = 1
    end
    % run through and check the rest
    for n = 2:length(trials.exp.two(:,1));
        if trials.exp.two(n,5) == 2 & trials.exp.two(n-1,5) == 1;
            try
                trials.exp.two_12(length(trials.exp.two_12(:,1)) + 1,:) = trials.exp.two(n,:);
            catch
                trials.exp.two_12(1,:) = trials.exp.two(n,:);
            end
        elseif trials.exp.two(n,5) == 2;
            try
                trials.exp.two_22(length(trials.exp.two_22(:,1)) + 1,:) = trials.exp.two(n,:);
                trials.exp.two_22(length(trials.exp.two_22(:,1)),17) = length(trials.exp.two_22(:,1))
            catch
                trials.exp.two_22(1,:) = trials.exp.two(n,:);
                trials.exp.two_22(1,17) = 1
            end
        end
    end
    % 
    % CUE 3
    % Check the first trial
    if trials.exp.three(1,5) == 2
        trials.exp.three_22 = trials.exp.three(1,:);
        trials.exp.three_22(1,17) = 1
    end
    % run through and check the rest
    for n = 2:length(trials.exp.three(:,1));
        if trials.exp.three(n,5) == 2 & trials.exp.three(n-1,5) == 1;
            try
                trials.exp.three_12(length(trials.exp.three_12(:,1)) + 1,:) = trials.exp.three(n,:);
            catch
                trials.exp.three_12(1,:) = trials.exp.three(n,:);
            end
        elseif trials.exp.three(n,5) == 2;
            try
                trials.exp.three_22(length(trials.exp.three_22(:,1)) + 1,:) = trials.exp.three(n,:);
                trials.exp.three_22(length(trials.exp.three_22(:,1)),17) = length(trials.exp.three_22(:,1))
            catch
                trials.exp.three_22(1,:) = trials.exp.three(n,:);
                trials.exp.three_22(1,17) = 1
            end
        end
    end
    % 
    % CUE 4
    % Check the first trial
    if trials.exp.four(1,5) == 2
        trials.exp.four_22 = trials.exp.four(1,:);
        trials.exp.four_22(1,17) = 1
    end
    % run through and check the rest
    for n = 2:length(trials.exp.four(:,1));
        if trials.exp.four(n,5) == 2 & trials.exp.four(n-1,5) == 1;
            try
                trials.exp.four_12(length(trials.exp.four_12(:,1)) + 1,:) = trials.exp.four(n,:);
            catch
                trials.exp.four_12(1,:) = trials.exp.four(n,:);
            end
        elseif trials.exp.four(n,5) == 2;
            try
                trials.exp.four_22(length(trials.exp.four_22(:,1)) + 1,:) = trials.exp.four(n,:);
                trials.exp.four_22(length(trials.exp.four_22(:,1)),17) = length(trials.exp.four_22(:,1))
            catch
                trials.exp.four_22(1,:) = trials.exp.four(n,:);
                trials.exp.four_22(1,17) = 1
            end
        end
    end

    
    
    
    % set type 1 = max, 2 = mean
    type = 1;
    % load pupillometry data from onset of cue1 to onset of targets. This gives
    % the max, then the mean
    pupil = importdata('pupil_whole.xlsx');
    try
        pupil(1:8,:) = [];
    catch
        pupil = pupil.data;
        pupil(1:8,:) = [];
    end
    
    % find pupillometry data
    all.pupil.all = pupil(find(results(:,8) == 1),:);

    % take the average of all experimental trials within each block
    all.pupil.blocked(1,1) = median(pupil(find(results(:,1) < 33 & results(:,1) > 8 & results(:,5) == 2 & results(:,8) == 1),type));
    all.pupil.blocked(1,4) = range(pupil(find(results(:,1) < 33 & results(:,1) > 8 & results(:,5) == 2 & results(:,8) == 1),type));
    % run kolmogorov smirnov test, if 1 then not a normal distribution
    all.pupil.blocked(1,7) = kstest(pupil(find(results(:,1) < 33 & results(:,1) > 8 & results(:,5) == 2 & results(:,8) == 1),type));

    all.pupil.blocked(1,2) = median(pupil(find(results(:,1) < 57 & results(:,1) > 32 & results(:,5) == 2 & results(:,8) == 1),type));
    all.pupil.blocked(1,5) = range(pupil(find(results(:,1) < 57 & results(:,1) > 32 & results(:,5) == 2 & results(:,8) == 1),type));
    all.pupil.blocked(1,8) = kstest(pupil(find(results(:,1) < 57 & results(:,1) > 32 & results(:,5) == 2 & results(:,8) == 1),type));

    all.pupil.blocked(1,3) = median(pupil(find(results(:,1) < 81 & results(:,1) > 56 & results(:,5) == 2 & results(:,8) == 1),type));
    all.pupil.blocked(1,6) = range(pupil(find(results(:,1) < 81 & results(:,1) > 56 & results(:,5) == 2 & results(:,8) == 1),type));
    all.pupil.blocked(1,9) = kstest(pupil(find(results(:,1) < 81 & results(:,1) > 56 & results(:,5) == 2 & results(:,8) == 1),type));


    % find pupillometry data
    all.pupil.all = pupil(find(results(:,8) == 1),:);

    % take the average of all control trials within each block
    all.pupil.blocked(1,10) = median(pupil(find(results(:,1) < 33 & results(:,1) > 8 & results(:,5) == 2 & results(:,8) == 2),type));
    all.pupil.blocked(1,13) = range(pupil(find(results(:,1) < 33 & results(:,1) > 8 & results(:,5) == 2 & results(:,8) == 2),type));
    % run kolmogorov smirnov test, if 1 then not a normal distribution
    all.pupil.blocked(1,16) = kstest(pupil(find(results(:,1) < 33 & results(:,1) > 8 & results(:,5) == 2 & results(:,8) == 2),type));

    all.pupil.blocked(1,11) = median(pupil(find(results(:,1) < 57 & results(:,1) > 32 & results(:,5) == 2 & results(:,8) == 2),type));
    all.pupil.blocked(1,14) = range(pupil(find(results(:,1) < 57 & results(:,1) > 32 & results(:,5) == 2 & results(:,8) == 2),type));
    all.pupil.blocked(1,17) = kstest(pupil(find(results(:,1) < 57 & results(:,1) > 32 & results(:,5) == 2 & results(:,8) == 2),type));

    all.pupil.blocked(1,12) = median(pupil(find(results(:,1) < 81 & results(:,1) > 56 & results(:,5) == 2 & results(:,8) == 2),type));
    all.pupil.blocked(1,15) = range(pupil(find(results(:,1) < 81 & results(:,1) > 56 & results(:,5) == 2 & results(:,8) == 2),type));
    all.pupil.blocked(1,18) = kstest(pupil(find(results(:,1) < 81 & results(:,1) > 56 & results(:,5) == 2 & results(:,8) == 2),type));
    
    
    
    % find the experimental trials
    exp.results = results(find(results(:,8) == 1),:);
    % block up the experimental trials
    exp.block.one = exp.results(find(exp.results(:,1) < 33),:);
    % finds the percentage relative to total number trials (missed or not)
    exp.cor(1) = (length(find(exp.block.one(:,5) == 2)) ./ 8) .* 100;
    % finds the percentage relative to the number of non miss trials
    exp.cor_only(1) = (length(find(exp.block.one(:,5) == 2)) ./ length(find(exp.block.one(:,5) > 0))) .* 100;
    all.rt(1) = median(exp.block.one(find(exp.block.one(:,2) > 0 & exp.block.one(:,5) == 2),2));
    
    exp.block.two = exp.results(find(exp.results(:,1) < 57 & exp.results(:,1) > 32),:);
    exp.cor(2) = (length(find(exp.block.two(:,5) == 2)) ./ 8) .* 100;
    % finds the percentage relative to the number of non miss trials
    exp.cor_only(2) = (length(find(exp.block.two(:,5) == 2)) ./ length(find(exp.block.two(:,5) > 0))) .* 100;
    all.rt(2) = median(exp.block.two(find(exp.block.two(:,2) > 0 & exp.block.two(:,5) == 2),2));
    
    exp.block.thr = exp.results(find(exp.results(:,1) < 81 & exp.results(:,1) > 56),:);
    exp.cor(3) = (length(find(exp.block.thr(:,5) == 2)) ./ 8) .* 100;
    % finds the percentage relative to the number of non miss trials
    exp.cor_only(3) = (length(find(exp.block.thr(:,5) == 2)) ./ length(find(exp.block.thr(:,5) > 0))) .* 100;
    all.rt(3) = median(exp.block.thr(find(exp.block.thr(:,2) > 0 & exp.block.thr(:,5) == 2),2));
  
    % find the control trials
    con.results = results(find(results(:,8) == 2),:);
    % block up the control trials
    con.block.one = con.results(find(con.results(:,1) < 33),:);
    % finds the percentage relative to total number trials (missed or not)
    con.cor(1) = (length(find(con.block.one(:,5) == 2)) ./ 8) .* 100;
    % finds the percentage relative to the number of non miss trials
    con.cor_only(1) = (length(find(con.block.one(:,5) == 2)) ./ length(find(con.block.one(:,5) > 0))) .* 100;
    all.rt(4) = median(con.block.one(find(con.block.one(:,2) > 0 & con.block.one(:,5) == 2),2));
    
    con.block.two = con.results(find(con.results(:,1) < 57 & con.results(:,1) > 32),:);
    con.cor(2) = (length(find(con.block.two(:,5) == 2)) ./ 8) .* 100;
    % finds the percentage relative to the number of non miss trials
    con.cor_only(2) = (length(find(con.block.two(:,5) == 2)) ./ length(find(con.block.two(:,5) > 0))) .* 100;
    all.rt(5) = median(con.block.two(find(con.block.two(:,2) > 0 & con.block.two(:,5) == 2),2));
    
    con.block.thr = con.results(find(con.results(:,1) < 81 & con.results(:,1) > 56),:);
    con.cor(3) = (length(find(con.block.thr(:,5) == 2)) ./ 8) .* 100;
    % finds the percentage relative to the number of non miss trials
    con.cor_only(3) = (length(find(con.block.thr(:,5) == 2)) ./ length(find(con.block.thr(:,5) > 0))) .* 100;
    all.rt(6) = median(con.block.thr(find(con.block.thr(:,2) > 0 & con.block.thr(:,5) == 2),2));
    
    
    
    
    
    
    
    cd('F:/Experiment_3/design_2_base/testing');
    try
        cue = importdata('cue_data.mat');
    end
    % set the participant number
    cue(m,1) = par(m);
    % for each cue caluclate the total number of trials included, and the
    % ratio of this to the total across trials
    try
        cue(m,2) = length(trials.exp.one_22(:,1));
        cue(m,3) = cue(m,2) ./ num_trials(m);
    end
    try
        cue(m,4) = length(trials.exp.two_22(:,1));
        cue(m,5) = cue(m,4) ./ num_trials(m);
    end
    try
        cue(m,6) = length(trials.exp.three_22(:,1));
        cue(m,7) = cue(m,6) ./ num_trials(m);
    end
    try
        cue(m,8) = length(trials.exp.four_22(:,1));
        cue(m,9) = cue(m,8) ./ num_trials(m);
    end
    % set the maximum ratio
    cue(m,10) = max([cue(m,3) cue(m,5) cue(m,7) cue(m,9)]);
    % then calculate the number of trials correct in the cue with the
    % highest ratio
    try
        cue(m,11) = cue(m,find(cue(m,1:9) == cue(m,10)) - 1);
        % catches cases where there is more than one max
    catch
        clear list
        list = find(cue(m,1:9) == cue(m,10));
        cue(m,11) = cue(m,list(1) - 1);
    end
    % sanity check to ensure ratio adds up to 1
    cue(m,12) = sum([cue(m,3) cue(m,5) cue(m,7) cue(m,9)]);
    % also check for low values, what is the lowest number of usable trials
    % excluding zero values#
    cue(m,13) = min([cue(m,2) cue(m,4) cue(m,6) cue(m,8)]);
    % finally take the average number of trials per cue when that cue is
    % included in the analysis
    cue(m,14) = 0;
    clear divider
    divider = 0;
    % check if it has a non zero value, if so add it to the total. Also add
    % one to divider so we know what to divide by.
    if cue(m,2) > 0;
        cue(m,14) = cue(m,14) + cue(m,2);
        divider = divider + 1;
    end
    if cue(m,4) > 0;
        cue(m,14) = cue(m,14) + cue(m,4);
        divider = divider + 1;
    end
    if cue(m,6) > 0;
        cue(m,14) = cue(m,14) + cue(m,6);
        divider = divider + 1;
    end
    if cue(m,8) > 0;
        cue(m,14) = cue(m,14) + cue(m,8);
        divider = divider + 1;
    end
    % and divide
    cue(m,14) = cue(m,14) ./ divider;
    
    % add in the pupillometry data
    cue(m,17:34) = all.pupil.blocked;
    
    % add the rt data
    cue(m,37:42) = all.rt;


    save cue_data cue
end
